AWSTemplateFormatVersion: "2010-09-09"
Description: This template will launch an ECS service (Fargate) for the Modernization Workshop.

Parameters:
  VPCstack:
    Type: String
    Description: VPC stack to import values from
    Default: ModernizationVPC
    
  DesiredCount:
    Type: Number
    Default: 1    

Resources:
  CloudwatchLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: ModernizationWorkshop
      RetentionInDays: 30      

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ModernizationCluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal: 
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"         
      RoleName: "FargateExecutionRole"
      
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "modernization-workshop"
      Memory: "2 gb"
      Cpu: "1 vcpu"
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !Ref TaskExecutionRole
      RequiresCompatibilities: 
        - "FARGATE"
      ContainerDefinitions:
        - Name: postgres
          Image: postgres:9.6
          Cpu: 512
          Memory: 1024
          PortMappings:
            - ContainerPort: 5432
          Environment:
            - Name: POSTGRES_DB
              Value: petstore
            - Name: POSTGRES_USER
              Value: admin
            - Name: POSTGRES_PASSWORD
              Value: password
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CloudwatchLogGroup
              awslogs-stream-prefix: "postgres"
        - Name: modernization-workshop
          Image: 
            !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/modernization-workshop:latest'
          Cpu: 512
          Memory: 1024
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: DB_HOST
              Value: 127.0.0.1
            - Name: DB_NAME
              Value: petstore
            - Name: DB_PASS
              Value: password
            - Name: DB_PORT
              Value: 5432
            - Name: DB_URL
              Value: jdbc:postgresql://127.0.0.1:5432/petstore?ApplicationName=applicationPetstore
            - Name: DB_USER
              Value: admin          
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CloudwatchLogGroup
              awslogs-stream-prefix: "web"

  
  TaskSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: UnicornStoreTaskSecurityGroup
      GroupDescription: Security group for the Modernization Workshop Fargate Task
      VpcId: 
        Fn::ImportValue: !Sub "${VPCstack}:VPCId"
  
  TaskSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref TaskSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref LBSecurityGroup     
  
  FargateService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      HealthCheckGracePeriodSeconds: 120
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref TaskSecurityGroup
          Subnets: 
            - Fn::ImportValue: !Sub "${VPCstack}:PublicSubnet1"
            - Fn::ImportValue: !Sub "${VPCstack}:PublicSubnet2"
      LoadBalancers:
        - ContainerName: modernization-workshop
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      ServiceName: ModernService
      
  LBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: LbSecurityGroup
      GroupDescription: Security group the the Modernization Workshop Application Load Balancer
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: 'tcp'
          FromPort: '8080'
          ToPort: '8080'
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
      VpcId: 
        Fn::ImportValue: !Sub "${VPCstack}:VPCId"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Modernization-Workshop-LB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub "${VPCstack}:PublicSubnet1"
        - Fn::ImportValue: !Sub "${VPCstack}:PublicSubnet2"
      Tags:
        - Key: Name
          Value: Modernization-Workshop-LB
      Type: application
      IpAddressType: ipv4

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Name: ecs-modernization-service
      VpcId: 
        Fn::ImportValue: !Sub "${VPCstack}:VPCId"
      Port: 8080
      Protocol: HTTP
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 30
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      TargetType: ip
          
Outputs:
  Service:
    Value: !Ref FargateService
  
  TargetGroup:
    Value: !Ref TargetGroup

  ServiceUrl:
    Description: URL of the load balancer for the sample service.
    Value: !Sub http://${LoadBalancer.DNSName}
    
      
  
